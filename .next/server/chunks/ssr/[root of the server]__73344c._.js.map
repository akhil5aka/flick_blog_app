{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Akhil/Desktop/New%20folder/testfull/app/api/savepost/api_serivice.ts"],"sourcesContent":["import { HomePageData, PostResponse, SlugPath } from \"../../../hometypes\"; // Import the types\r\n\r\n\r\ninterface PostData {\r\n    attributes: {\r\n      slug: string;\r\n      [key: string]: unknown; // Add other attributes if needed\r\n    };\r\n  }\r\n\r\n\r\n// const STRAPI_API_URL = \"http://localhost:1337/api\";\r\n\r\nconst STRAPI_API_URL = process.env.STRAPI_API_URL;\r\n\r\n\r\n// Function to load homepage data\r\nexport const loadhomepage = async (): Promise<HomePageData> => {\r\n  try {\r\n    const response = await fetch(`${STRAPI_API_URL}/home-page`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch homepage data: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json(); // Return the typed data\r\n  } catch (err) {\r\n    console.error(\"Error fetching homepage data:\", err);\r\n    throw new Error(\"Could not load homepage data.\");\r\n  }\r\n};\r\n\r\n// Function to load posts data\r\nexport const loadposts = async (): Promise<PostResponse> => {\r\n  try {\r\n    // const response = await fetch(`${STRAPI_API_URL}/posts?populate=image`, {\r\n      const response = await fetch(`${STRAPI_API_URL}/blog-posts?populate=image`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch posts: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json(); // Return the typed data\r\n  } catch (err) {\r\n    console.error(\"Error fetching posts:\", err);\r\n    throw new Error(\"Could not load posts data.\");\r\n  }\r\n};\r\n\r\n// Function to load a single post by slug\r\nexport const loadPostBySlug = async (slug: string): Promise<PostResponse> => {\r\n  try {\r\n    const response = await fetch(\r\n      // `${STRAPI_API_URL}/posts?filters[slug][$eq]=${slug}&populate=image`\r\n      `${STRAPI_API_URL}/blog-posts?filters[slug][$eq]=${slug}&populate=image`\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch post data\");\r\n    }\r\n\r\n    return await response.json(); // Return the typed data\r\n  } catch (err) {\r\n    console.error(\"Error fetching post by slug:\", err);\r\n    throw new Error(\"Could not load post data.\");\r\n  }\r\n};\r\n\r\n// Function to load all slugs for generating static paths\r\nexport const loadapaths = async (): Promise<SlugPath[]> => {\r\n  try {\r\n    // const response = await fetch(`${STRAPI_API_URL}/posts`, {\r\n      const response = await fetch(`${STRAPI_API_URL}/blog-posts`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch paths: ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.data.map((post: PostData) => ({\r\n      slug: post.attributes.slug,\r\n    }));\r\n  } catch (err) {\r\n    console.error(\"Error fetching slugs for paths:\", err);\r\n    throw new Error(\"Could not load paths.\");\r\n  }\r\n};\r\n"],"names":[],"mappings":";;;;;;AAWA,sDAAsD;AAEtD,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc;AAI1C,MAAM,eAAe;IAC1B,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,GAAG,eAAe,UAAU,CAAC,EAAE;YAC1D,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,+BAA+B,EAAE,SAAS,UAAU,EAAE;QACzE;QAEA,OAAO,MAAM,SAAS,IAAI,IAAI,wBAAwB;IACxD,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,MAAM,YAAY;IACvB,IAAI;QACF,2EAA2E;QACzE,MAAM,WAAW,MAAM,MAAM,GAAG,eAAe,0BAA0B,CAAC,EAAE;YAC5E,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,SAAS,UAAU,EAAE;QACjE;QAEA,OAAO,MAAM,SAAS,IAAI,IAAI,wBAAwB;IACxD,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,MAAM,iBAAiB,OAAO;IACnC,IAAI;QACF,MAAM,WAAW,MAAM,MACrB,sEAAsE;QACtE,GAAG,eAAe,+BAA+B,EAAE,KAAK,eAAe,CAAC;QAG1E,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO,MAAM,SAAS,IAAI,IAAI,wBAAwB;IACxD,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,MAAM,aAAa;IACxB,IAAI;QACF,4DAA4D;QAC1D,MAAM,WAAW,MAAM,MAAM,GAAG,eAAe,WAAW,CAAC,EAAE;YAC7D,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,SAAS,UAAU,EAAE;QACjE;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,OAAmB,CAAC;gBACxC,MAAM,KAAK,UAAU,CAAC,IAAI;YAC5B,CAAC;IACH,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,mCAAmC;QACjD,MAAM,IAAI,MAAM;IAClB;AACF"}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/page.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"contentText\": \"page-module__Nmrpnq__contentText\",\n  \"gridContainer\": \"page-module__Nmrpnq__gridContainer\",\n  \"imageContainer\": \"page-module__Nmrpnq__imageContainer\",\n  \"postCard\": \"page-module__Nmrpnq__postCard\",\n  \"postContent\": \"page-module__Nmrpnq__postContent\",\n  \"postDescription\": \"page-module__Nmrpnq__postDescription\",\n  \"postDetails\": \"page-module__Nmrpnq__postDetails\",\n  \"postImage\": \"page-module__Nmrpnq__postImage\",\n  \"postImageWrapper\": \"page-module__Nmrpnq__postImageWrapper\",\n  \"postImage_blg\": \"page-module__Nmrpnq__postImage_blg\",\n  \"postMeta\": \"page-module__Nmrpnq__postMeta\",\n  \"postTitle\": \"page-module__Nmrpnq__postTitle\",\n  \"postsSection\": \"page-module__Nmrpnq__postsSection\",\n  \"sectionTitle\": \"page-module__Nmrpnq__sectionTitle\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Akhil/Desktop/New%20folder/testfull/app/blog/page.tsx"],"sourcesContent":["import { loadhomepage, loadposts } from \"../api/savepost/api_serivice\";\r\nimport dotenv from \"dotenv\";\r\nimport Link from \"next/link\";\r\nimport Image from \"next/image\";\r\nimport { Post, PostResponse } from \"../../hometypes\";\r\nimport styles from \"../../page.module.css\";\r\n\r\ndotenv.config();\r\n\r\ninterface HomePageData {\r\n  data: {\r\n    attributes: {\r\n      title: string;\r\n    };\r\n  };\r\n}\r\n\r\nexport async function generateMetadata() {\r\n  const postsdata: PostResponse | null = await loadposts();\r\n\r\n  const postsMetadata = postsdata?.data.map((post: Post) => ({\r\n    title: post.title || \"Flick Network\",\r\n    description: post.short_description || \"Explore the latest blog posts on Flick Network.\",\r\n    openGraph: {\r\n      images: [\"/default-image.jpg\"], // Default image or dynamically fetched\r\n    },\r\n    twitter: {\r\n      card: \"summary_large_image\",\r\n    },\r\n  }));\r\n\r\n  return postsMetadata[0]; // Return the first metadata object as default\r\n}\r\n\r\nexport default async function Home() {\r\n  try {\r\n    const homepagedata: HomePageData | null = await loadhomepage();\r\n    const postsdata: PostResponse | null = await loadposts();\r\n    const metadata = await generateMetadata(); // Fetch metadata\r\n\r\n    // Hydration fix: Make sure content matches between SSR and CSR\r\n    const title = metadata?.title || \"Flick Network\";\r\n    const description = metadata?.description || \"Explore the latest blog posts on Flick Network\";\r\n\r\n    return (\r\n      <> \r\n        <head>\r\n          <title>{title}</title>\r\n          <meta name=\"description\" content={description} />\r\n          <meta name=\"title\" content={title} />\r\n        </head>\r\n\r\n        <main className=\"flex flex-col items-center p-4\">\r\n          <header className=\"items-center\">\r\n            <h1 className=\"text-3xl font-bold mb-6 text-blue-800\">\r\n              {homepagedata?.data?.attributes?.title || \"Flick Network\"}\r\n            </h1>\r\n            <p className=\"items-center p-2\">Welcome to our blog!</p>\r\n          </header>\r\n\r\n          <section className=\"w-full max-w-5xl\">\r\n            <h2 className=\"text-2xl font-semibold mb-6\">Blog Posts</h2>\r\n            {postsdata?.data?.length ? (\r\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 lg:grid-cols-3 gap-6\">\r\n                {postsdata.data.map((post: Post) => (\r\n                  <Link\r\n                    key={post.id}\r\n                    href={`/blog/${post.slug}`}\r\n                    passHref\r\n                    className=\"bg-gray-100 rounded-md shadow-black hover:shadow-lg transition-shadow duration-300\"\r\n                  >\r\n                    <div className=\"w-full aspect-auto rounded-lg overflow-hidden drop-shadow shadow-inherit hover:shadow-lg\">\r\n                      <Image\r\n                        src={\r\n                          post.image?.formats?.thumbnail?.url\r\n                            ? `${process.env.STRAPI_API}${post.image.formats.thumbnail.url}`\r\n                            : \"/placeholder-image.jpg\"\r\n                        }\r\n                        alt={post.title}\r\n                        width={500}\r\n                        height={300}\r\n                        className=\"w-full h-full object-cover\"\r\n                      />\r\n                    </div>\r\n                    <div className={styles.postContent}>\r\n                      <h3 className=\"text-2xl font-bold text-gray-700\">\r\n                        {post.title}\r\n                      </h3>\r\n                      <p className=\"text-sm font-bold text-gray-500\">\r\n                        {post.short_description}\r\n                      </p>\r\n\r\n                      <div className={styles.postMeta}>\r\n                        <p className={styles.postDate}>\r\n                          <strong>Published:</strong>{\" \"}\r\n                          {new Date(post.publishedAt).toLocaleString()}\r\n                        </p>\r\n                      </div>\r\n\r\n                      \r\n                    </div>\r\n                  </Link>\r\n                ))}\r\n              </div>\r\n            ) : (\r\n              <p>No blog posts found.</p>\r\n            )}\r\n          </section>\r\n        </main>\r\n      </>\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error fetching homepage or posts data:\", error);\r\n    return <div>Error loading content. Please try again later.</div>;\r\n  }\r\n}\r\n\r\nexport const revalidate = 10;\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AAEA;;;;;;;AAEA,qIAAA,CAAA,UAAM,CAAC,MAAM;AAUN,eAAe;IACpB,MAAM,YAAiC,MAAM,CAAA,GAAA,sIAAA,CAAA,YAAS,AAAD;IAErD,MAAM,gBAAgB,WAAW,KAAK,IAAI,CAAC,OAAe,CAAC;YACzD,OAAO,KAAK,KAAK,IAAI;YACrB,aAAa,KAAK,iBAAiB,IAAI;YACvC,WAAW;gBACT,QAAQ;oBAAC;iBAAqB;YAChC;YACA,SAAS;gBACP,MAAM;YACR;QACF,CAAC;IAED,OAAO,aAAa,CAAC,EAAE,EAAE,8CAA8C;AACzE;AAEe,eAAe;IAC5B,IAAI;QACF,MAAM,eAAoC,MAAM,CAAA,GAAA,sIAAA,CAAA,eAAY,AAAD;QAC3D,MAAM,YAAiC,MAAM,CAAA,GAAA,sIAAA,CAAA,YAAS,AAAD;QACrD,MAAM,WAAW,MAAM,oBAAoB,iBAAiB;QAE5D,+DAA+D;QAC/D,MAAM,QAAQ,UAAU,SAAS;QACjC,MAAM,cAAc,UAAU,eAAe;QAE7C,qBACE;;8BACE,8OAAC;;sCACC,8OAAC;sCAAO;;;;;;sCACR,8OAAC;4BAAK,MAAK;4BAAc,SAAS;;;;;;sCAClC,8OAAC;4BAAK,MAAK;4BAAQ,SAAS;;;;;;;;;;;;8BAG9B,8OAAC;oBAAK,WAAU;;sCACd,8OAAC;4BAAO,WAAU;;8CAChB,8OAAC;oCAAG,WAAU;8CACX,cAAc,MAAM,YAAY,SAAS;;;;;;8CAE5C,8OAAC;oCAAE,WAAU;8CAAmB;;;;;;;;;;;;sCAGlC,8OAAC;4BAAQ,WAAU;;8CACjB,8OAAC;oCAAG,WAAU;8CAA8B;;;;;;gCAC3C,WAAW,MAAM,uBAChB,8OAAC;oCAAI,WAAU;8CACZ,UAAU,IAAI,CAAC,GAAG,CAAC,CAAC,qBACnB,8OAAC,4JAAA,CAAA,UAAI;4CAEH,MAAM,CAAC,MAAM,EAAE,KAAK,IAAI,EAAE;4CAC1B,QAAQ;4CACR,WAAU;;8DAEV,8OAAC;oDAAI,WAAU;8DACb,cAAA,8OAAC,6HAAA,CAAA,UAAK;wDACJ,KACE,KAAK,KAAK,EAAE,SAAS,WAAW,MAC5B,GAAG,QAAQ,GAAG,CAAC,UAAU,GAAG,KAAK,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,EAAE,GAC9D;wDAEN,KAAK,KAAK,KAAK;wDACf,OAAO;wDACP,QAAQ;wDACR,WAAU;;;;;;;;;;;8DAGd,8OAAC;oDAAI,WAAW,mHAAA,CAAA,UAAM,CAAC,WAAW;;sEAChC,8OAAC;4DAAG,WAAU;sEACX,KAAK,KAAK;;;;;;sEAEb,8OAAC;4DAAE,WAAU;sEACV,KAAK,iBAAiB;;;;;;sEAGzB,8OAAC;4DAAI,WAAW,mHAAA,CAAA,UAAM,CAAC,QAAQ;sEAC7B,cAAA,8OAAC;gEAAE,WAAW,mHAAA,CAAA,UAAM,CAAC,QAAQ;;kFAC3B,8OAAC;kFAAO;;;;;;oEAAoB;oEAC3B,IAAI,KAAK,KAAK,WAAW,EAAE,cAAc;;;;;;;;;;;;;;;;;;;2CA7B3C,KAAK,EAAE;;;;;;;;;yDAuClB,8OAAC;8CAAE;;;;;;;;;;;;;;;;;;;;IAMf,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0CAA0C;QACxD,qBAAO,8OAAC;sBAAI;;;;;;IACd;AACF;AAEO,MAAM,aAAa"}},
    {"offset": {"line": 367, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 373, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Akhil/Desktop/New%20folder/testfull/app/page.tsx"],"sourcesContent":["\nimport Bloglist  from \"./blog/page\"\n\nexport default function HomePage() {\n  return (\n\n    <Bloglist/>\n\n\n  );\n}\n"],"names":[],"mappings":";;;;AACA;;;AAEe,SAAS;IACtB,qBAEE,8OAAC,oHAAA,CAAA,UAAQ;;;;;AAIb"}},
    {"offset": {"line": 387, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}