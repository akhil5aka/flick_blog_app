{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Akhil/Desktop/New%20folder/testfull/app/api/savepost/api_serivice.ts"],"sourcesContent":["import { HomePageData, PostResponse, SlugPath } from \"../../../hometypes\"; // Import the types\r\n\r\n\r\ninterface PostData {\r\n    attributes: {\r\n      slug: string;\r\n      [key: string]: unknown; // Add other attributes if needed\r\n    };\r\n  }\r\n\r\n\r\n// const STRAPI_API_URL = \"http://localhost:1337/api\";\r\n\r\nconst STRAPI_API_URL = process.env.STRAPI_API_URL;\r\n\r\n\r\n// Function to load homepage data\r\nexport const loadhomepage = async (): Promise<HomePageData> => {\r\n  try {\r\n    const response = await fetch(`${STRAPI_API_URL}/home-page`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch homepage data: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json(); // Return the typed data\r\n  } catch (err) {\r\n    console.error(\"Error fetching homepage data:\", err);\r\n    throw new Error(\"Could not load homepage data.\");\r\n  }\r\n};\r\n\r\n// Function to load posts data\r\nexport const loadposts = async (): Promise<PostResponse> => {\r\n  try {\r\n    // const response = await fetch(`${STRAPI_API_URL}/posts?populate=image`, {\r\n      const response = await fetch(`${STRAPI_API_URL}/blog-posts?populate=image`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch posts: ${response.statusText}`);\r\n    }\r\n\r\n    return await response.json(); // Return the typed data\r\n  } catch (err) {\r\n    console.error(\"Error fetching posts:\", err);\r\n    throw new Error(\"Could not load posts data.\");\r\n  }\r\n};\r\n\r\n// Function to load a single post by slug\r\nexport const loadPostBySlug = async (slug: string): Promise<PostResponse> => {\r\n  try {\r\n    const response = await fetch(\r\n      // `${STRAPI_API_URL}/posts?filters[slug][$eq]=${slug}&populate=image`\r\n      `${STRAPI_API_URL}/blog-posts?filters[slug][$eq]=${slug}&populate=image`\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to fetch post data\");\r\n    }\r\n\r\n    return await response.json(); // Return the typed data\r\n  } catch (err) {\r\n    console.error(\"Error fetching post by slug:\", err);\r\n    throw new Error(\"Could not load post data.\");\r\n  }\r\n};\r\n\r\n// Function to load all slugs for generating static paths\r\nexport const loadapaths = async (): Promise<SlugPath[]> => {\r\n  try {\r\n    // const response = await fetch(`${STRAPI_API_URL}/posts`, {\r\n      const response = await fetch(`${STRAPI_API_URL}/blog-posts`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch paths: ${response.statusText}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n    return data.data.map((post: PostData) => ({\r\n      slug: post.attributes.slug,\r\n    }));\r\n  } catch (err) {\r\n    console.error(\"Error fetching slugs for paths:\", err);\r\n    throw new Error(\"Could not load paths.\");\r\n  }\r\n};\r\n"],"names":[],"mappings":";;;;;;AAWA,sDAAsD;AAEtD,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc;AAI1C,MAAM,eAAe;IAC1B,IAAI;QACF,MAAM,WAAW,MAAM,MAAM,GAAG,eAAe,UAAU,CAAC,EAAE;YAC1D,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,+BAA+B,EAAE,SAAS,UAAU,EAAE;QACzE;QAEA,OAAO,MAAM,SAAS,IAAI,IAAI,wBAAwB;IACxD,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,MAAM,YAAY;IACvB,IAAI;QACF,2EAA2E;QACzE,MAAM,WAAW,MAAM,MAAM,GAAG,eAAe,0BAA0B,CAAC,EAAE;YAC5E,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,SAAS,UAAU,EAAE;QACjE;QAEA,OAAO,MAAM,SAAS,IAAI,IAAI,wBAAwB;IACxD,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,yBAAyB;QACvC,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,MAAM,iBAAiB,OAAO;IACnC,IAAI;QACF,MAAM,WAAW,MAAM,MACrB,sEAAsE;QACtE,GAAG,eAAe,+BAA+B,EAAE,KAAK,eAAe,CAAC;QAG1E,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM;QAClB;QAEA,OAAO,MAAM,SAAS,IAAI,IAAI,wBAAwB;IACxD,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,MAAM,IAAI,MAAM;IAClB;AACF;AAGO,MAAM,aAAa;IACxB,IAAI;QACF,4DAA4D;QAC1D,MAAM,WAAW,MAAM,MAAM,GAAG,eAAe,WAAW,CAAC,EAAE;YAC7D,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,uBAAuB,EAAE,SAAS,UAAU,EAAE;QACjE;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC,OAAmB,CAAC;gBACxC,MAAM,KAAK,UAAU,CAAC,IAAI;YAC5B,CAAC;IACH,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,mCAAmC;QACjD,MAAM,IAAI,MAAM;IAClB;AACF"}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Akhil/Desktop/New%20folder/testfull/app/blog/%5Bslug%5D/page.tsx"],"sourcesContent":["import Image from \"next/image\";\r\nimport { loadPostBySlug, loadposts } from \"../../api/savepost/api_serivice\";\r\nimport { Post, PostResponse } from \"../../../hometypes\";\r\n\r\ninterface Props {\r\n  params: Promise<{ slug: string }>; // Make params a Promise\r\n}\r\n\r\nexport default async function PostDetails({ params }: Props) {\r\n  try {\r\n    const { slug } = await params; // Extract slug from params\r\n\r\n    // Fetch the post details by slug\r\n    const postDetailsResponse: PostResponse = await loadPostBySlug(slug);\r\n\r\n    // Check if postDetails exists and has the necessary structure\r\n    if (!postDetailsResponse?.data?.length) {\r\n      return <div className=\"text-center text-red-500\">Post not found or data is incomplete.</div>;\r\n    }\r\n\r\n    // Extract the post details from the response\r\n    const post: Post = postDetailsResponse.data[0];\r\n\r\n    return (\r\n\r\n\r\n      <div className=\"max-w-4xl mx-auto p-6 bg-white rounded-lg shadow-md\">\r\n        {/* Title Section */}\r\n        <h1 className=\"text-2xl font-bold text-gray-800 mb-4\">{post.title}</h1>\r\n\r\n        {/* Image Section */}\r\n        {post.image && (\r\n          <div className=\"w-full overflow-hidden rounded-md shadow-md mb-6\">\r\n            <Image\r\n              src={\r\n                post.image.formats?.thumbnail?.url\r\n                  ? process.env.STRAPI_API + post.image.formats.thumbnail.url\r\n                  : \"/placeholder-image.jpg\"\r\n              } \r\n              alt={post.title}\r\n              width={800}\r\n              height={400}\r\n              className=\"w-full h-auto object-cover\"\r\n            />\r\n          </div>\r\n        )}\r\n\r\n        {/* Content Section */}\r\n        <div className=\"space-y-4\">\r\n          {post.content.map((contentBlock, index) => (\r\n            <p key={index} className=\"text-gray-700 text-base leading-relaxed\">\r\n              {contentBlock.children.map((child, childIndex) => (\r\n                <span key={childIndex}>{child.text}</span>\r\n              ))}\r\n            </p>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Error loading post details:\", error);\r\n    return (\r\n      <div className=\"text-center text-red-600\">\r\n        Error loading post details. Please try again later.\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport async function generateStaticParams() {\r\n  try {\r\n    // Fetch posts to generate static paths\r\n    const postPaths: PostResponse = await loadposts();\r\n\r\n    if (!postPaths?.data?.length) {\r\n      console.warn(\"No posts found or invalid data structure.\");\r\n      return []; // Return empty array if no valid posts are found\r\n    }\r\n\r\n    // Map the post slugs for static paths\r\n    return postPaths.data.map((post) => ({\r\n      slug: post.slug,\r\n    }));\r\n  } catch (error) {\r\n    console.error(\"Error generating static params:\", error);\r\n    return []; // Return empty array to avoid build failure\r\n  }\r\n}\r\n\r\nexport const revalidate = 10;\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;;AAOe,eAAe,YAAY,EAAE,MAAM,EAAS;IACzD,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,QAAQ,2BAA2B;QAE1D,iCAAiC;QACjC,MAAM,sBAAoC,MAAM,CAAA,GAAA,sIAAA,CAAA,iBAAc,AAAD,EAAE;QAE/D,8DAA8D;QAC9D,IAAI,CAAC,qBAAqB,MAAM,QAAQ;YACtC,qBAAO,8OAAC;gBAAI,WAAU;0BAA2B;;;;;;QACnD;QAEA,6CAA6C;QAC7C,MAAM,OAAa,oBAAoB,IAAI,CAAC,EAAE;QAE9C,qBAGE,8OAAC;YAAI,WAAU;;8BAEb,8OAAC;oBAAG,WAAU;8BAAyC,KAAK,KAAK;;;;;;gBAGhE,KAAK,KAAK,kBACT,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC,6HAAA,CAAA,UAAK;wBACJ,KACE,KAAK,KAAK,CAAC,OAAO,EAAE,WAAW,MAC3B,QAAQ,GAAG,CAAC,UAAU,GAAG,KAAK,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,GACzD;wBAEN,KAAK,KAAK,KAAK;wBACf,OAAO;wBACP,QAAQ;wBACR,WAAU;;;;;;;;;;;8BAMhB,8OAAC;oBAAI,WAAU;8BACZ,KAAK,OAAO,CAAC,GAAG,CAAC,CAAC,cAAc,sBAC/B,8OAAC;4BAAc,WAAU;sCACtB,aAAa,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,2BACjC,8OAAC;8CAAuB,MAAM,IAAI;mCAAvB;;;;;2BAFP;;;;;;;;;;;;;;;;IASlB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,qBACE,8OAAC;YAAI,WAAU;sBAA2B;;;;;;IAI9C;AACF;AAEO,eAAe;IACpB,IAAI;QACF,uCAAuC;QACvC,MAAM,YAA0B,MAAM,CAAA,GAAA,sIAAA,CAAA,YAAS,AAAD;QAE9C,IAAI,CAAC,WAAW,MAAM,QAAQ;YAC5B,QAAQ,IAAI,CAAC;YACb,OAAO,EAAE,EAAE,iDAAiD;QAC9D;QAEA,sCAAsC;QACtC,OAAO,UAAU,IAAI,CAAC,GAAG,CAAC,CAAC,OAAS,CAAC;gBACnC,MAAM,KAAK,IAAI;YACjB,CAAC;IACH,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,EAAE,EAAE,4CAA4C;IACzD;AACF;AAEO,MAAM,aAAa"}},
    {"offset": {"line": 205, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}